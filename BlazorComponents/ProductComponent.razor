@using GridBlazor.Resources
@using Models.Validators
@using dotnet_inventory_example.Models
@using dotnet_inventory_example.Resources
@using dotnet_inventory_example.Services
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks

@inject IProductService2 product2Service
@inject IUnitService unitService
@inherits BaseCrud<Product2, Product2Validator>


@RenderGridUI()


@code
{
    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;
        SharedResource.Culture = locale;

        var query = new QueryDictionary<StringValues>();

        Action<IGridColumnCollection<Product2>> Product2Columns = c =>
        {
            c.Add(o => o.ProductId).SetPrimaryKey(true).Titled(SharedResource.Number).SetWidth(100);
            c.Add(o => o.ProductName).Titled("ProductName").SetWidth(100);
            c.Add(o => o.UnitPrice).Titled("UnitPrice").SetWidth(100);
            @* c.Add(o => o.Unit).Titled("Unit").SetWidth(100); *@

            c.Add(o => o.UnitId, true)
            .SetSelectField(true, o => o.Unit.UnitName,
            unitService.GetAllUnits).Titled("Unit").SetWidth(100);

            c.Add(o => o.Unit.UnitName).Titled("UnitName")
            .SetCrudHidden(true).SetWidth(100);

            c.Add(o => o.UnitsInStock).Titled("UnitsInStock").SetWidth(100);
            c.Add(o => o.Description).Titled("Description").SetWidth(100);
        };

        var client = new GridClient<Product2>(q => product2Service.GetProduct2sGridRowsAsync(Product2Columns, q),
        query, false, "Product2sGrid", Product2Columns, locale)
        .Sortable()
        .Filterable()
        .SetKeyboard(true)
        .Groupable(true)
        .ClearFiltersButton(true)
        .SetStriped(true)
        .WithMultipleFilters()
        .Searchable(true, false)
        .WithGridItemsCount()
        .ChangePageSize(true)
        .Crud(true, product2Service);

        _grid = client.Grid;

        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;

    }

}
